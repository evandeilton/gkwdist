// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dbeta_
Rcpp::NumericVector dbeta_(const arma::vec& x, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, bool log_prob);
RcppExport SEXP _gkwdist_dbeta_(SEXP xSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dbeta_(x, gamma, delta, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pbeta_
Rcpp::NumericVector pbeta_(const arma::vec& q, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_pbeta_(SEXP qSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pbeta_(q, gamma, delta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qbeta_
Rcpp::NumericVector qbeta_(const arma::vec& p, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_qbeta_(SEXP pSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qbeta_(p, gamma, delta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rbeta_
Rcpp::NumericVector rbeta_(int n, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta);
RcppExport SEXP _gkwdist_rbeta_(SEXP nSEXP, SEXP gammaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(rbeta_(n, gamma, delta));
    return rcpp_result_gen;
END_RCPP
}
// llbeta
double llbeta(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_llbeta(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llbeta(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grbeta
Rcpp::NumericVector grbeta(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_grbeta(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grbeta(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hsbeta
Rcpp::NumericMatrix hsbeta(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_hsbeta(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hsbeta(par, data));
    return rcpp_result_gen;
END_RCPP
}
// dbkw
Rcpp::NumericVector dbkw(const arma::vec& x, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, bool log_prob);
RcppExport SEXP _gkwdist_dbkw(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dbkw(x, alpha, beta, gamma, delta, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pbkw
Rcpp::NumericVector pbkw(const arma::vec& q, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_pbkw(SEXP qSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pbkw(q, alpha, beta, gamma, delta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qbkw
Rcpp::NumericVector qbkw(const arma::vec& p, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_qbkw(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qbkw(p, alpha, beta, gamma, delta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rbkw
Rcpp::NumericVector rbkw(int n, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta);
RcppExport SEXP _gkwdist_rbkw(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(rbkw(n, alpha, beta, gamma, delta));
    return rcpp_result_gen;
END_RCPP
}
// llbkw
double llbkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_llbkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llbkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grbkw
Rcpp::NumericVector grbkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_grbkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grbkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hsbkw
Rcpp::NumericMatrix hsbkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_hsbkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hsbkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// dmc
Rcpp::NumericVector dmc(const arma::vec& x, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool log_prob);
RcppExport SEXP _gkwdist_dmc(SEXP xSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dmc(x, gamma, delta, lambda, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pmc
Rcpp::NumericVector pmc(const arma::vec& q, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_pmc(SEXP qSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pmc(q, gamma, delta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qmc
Rcpp::NumericVector qmc(const arma::vec& p, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_qmc(SEXP pSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qmc(p, gamma, delta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rmc
Rcpp::NumericVector rmc(int n, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda);
RcppExport SEXP _gkwdist_rmc(SEXP nSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmc(n, gamma, delta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// llmc
double llmc(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_llmc(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llmc(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grmc
Rcpp::NumericVector grmc(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_grmc(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grmc(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hsmc
Rcpp::NumericMatrix hsmc(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_hsmc(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hsmc(par, data));
    return rcpp_result_gen;
END_RCPP
}
// dekw
Rcpp::NumericVector dekw(const arma::vec& x, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& lambda, bool log_prob);
RcppExport SEXP _gkwdist_dekw(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dekw(x, alpha, beta, lambda, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pekw
Rcpp::NumericVector pekw(const arma::vec& q, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_pekw(SEXP qSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pekw(q, alpha, beta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qekw
Rcpp::NumericVector qekw(const arma::vec& p, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_qekw(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qekw(p, alpha, beta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rekw
Rcpp::NumericVector rekw(int n, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& lambda);
RcppExport SEXP _gkwdist_rekw(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rekw(n, alpha, beta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// llekw
double llekw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_llekw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llekw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grekw
Rcpp::NumericVector grekw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_grekw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grekw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hsekw
Rcpp::NumericMatrix hsekw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_hsekw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hsekw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// dgkw
Rcpp::NumericVector dgkw(const arma::vec& x, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool log_prob);
RcppExport SEXP _gkwdist_dgkw(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dgkw(x, alpha, beta, gamma, delta, lambda, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pgkw
Rcpp::NumericVector pgkw(const arma::vec& q, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_pgkw(SEXP qSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pgkw(q, alpha, beta, gamma, delta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qgkw
Rcpp::NumericVector qgkw(const arma::vec& p, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_qgkw(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qgkw(p, alpha, beta, gamma, delta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rgkw
Rcpp::NumericVector rgkw(int n, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& gamma, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda);
RcppExport SEXP _gkwdist_rgkw(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rgkw(n, alpha, beta, gamma, delta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// llgkw
double llgkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_llgkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llgkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grgkw
Rcpp::NumericVector grgkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_grgkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grgkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hsgkw
Rcpp::NumericMatrix hsgkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_hsgkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hsgkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// gkwgetstartvalues
Rcpp::NumericVector gkwgetstartvalues(const Rcpp::NumericVector& x, std::string family, int n_starts);
RcppExport SEXP _gkwdist_gkwgetstartvalues(SEXP xSEXP, SEXP familySEXP, SEXP n_startsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type family(familySEXP);
    Rcpp::traits::input_parameter< int >::type n_starts(n_startsSEXP);
    rcpp_result_gen = Rcpp::wrap(gkwgetstartvalues(x, family, n_starts));
    return rcpp_result_gen;
END_RCPP
}
// dkkw
Rcpp::NumericVector dkkw(const arma::vec& x, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool log_prob);
RcppExport SEXP _gkwdist_dkkw(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dkkw(x, alpha, beta, delta, lambda, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pkkw
Rcpp::NumericVector pkkw(const arma::vec& q, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_pkkw(SEXP qSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pkkw(q, alpha, beta, delta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qkkw
Rcpp::NumericVector qkkw(const arma::vec& p, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_qkkw(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qkkw(p, alpha, beta, delta, lambda, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rkkw
Rcpp::NumericVector rkkw(int n, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, const Rcpp::NumericVector& delta, const Rcpp::NumericVector& lambda);
RcppExport SEXP _gkwdist_rkkw(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(rkkw(n, alpha, beta, delta, lambda));
    return rcpp_result_gen;
END_RCPP
}
// llkkw
double llkkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_llkkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llkkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grkkw
Rcpp::NumericVector grkkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_grkkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grkkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hskkw
Rcpp::NumericMatrix hskkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_hskkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hskkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// dkw
Rcpp::NumericVector dkw(const arma::vec& x, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, bool log_prob);
RcppExport SEXP _gkwdist_dkw(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP log_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type log_prob(log_probSEXP);
    rcpp_result_gen = Rcpp::wrap(dkw(x, alpha, beta, log_prob));
    return rcpp_result_gen;
END_RCPP
}
// pkw
Rcpp::NumericVector pkw(const arma::vec& q, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_pkw(SEXP qSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(pkw(q, alpha, beta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// qkw
Rcpp::NumericVector qkw(const arma::vec& p, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta, bool lower_tail, bool log_p);
RcppExport SEXP _gkwdist_qkw(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< bool >::type log_p(log_pSEXP);
    rcpp_result_gen = Rcpp::wrap(qkw(p, alpha, beta, lower_tail, log_p));
    return rcpp_result_gen;
END_RCPP
}
// rkw
Rcpp::NumericVector rkw(int n, const Rcpp::NumericVector& alpha, const Rcpp::NumericVector& beta);
RcppExport SEXP _gkwdist_rkw(SEXP nSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(rkw(n, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// llkw
double llkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_llkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(llkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// grkw
Rcpp::NumericVector grkw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_grkw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(grkw(par, data));
    return rcpp_result_gen;
END_RCPP
}
// hskw
Rcpp::NumericMatrix hskw(const Rcpp::NumericVector& par, const Rcpp::NumericVector& data);
RcppExport SEXP _gkwdist_hskw(SEXP parSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type par(parSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(hskw(par, data));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gkwdist_dbeta_", (DL_FUNC) &_gkwdist_dbeta_, 4},
    {"_gkwdist_pbeta_", (DL_FUNC) &_gkwdist_pbeta_, 5},
    {"_gkwdist_qbeta_", (DL_FUNC) &_gkwdist_qbeta_, 5},
    {"_gkwdist_rbeta_", (DL_FUNC) &_gkwdist_rbeta_, 3},
    {"_gkwdist_llbeta", (DL_FUNC) &_gkwdist_llbeta, 2},
    {"_gkwdist_grbeta", (DL_FUNC) &_gkwdist_grbeta, 2},
    {"_gkwdist_hsbeta", (DL_FUNC) &_gkwdist_hsbeta, 2},
    {"_gkwdist_dbkw", (DL_FUNC) &_gkwdist_dbkw, 6},
    {"_gkwdist_pbkw", (DL_FUNC) &_gkwdist_pbkw, 7},
    {"_gkwdist_qbkw", (DL_FUNC) &_gkwdist_qbkw, 7},
    {"_gkwdist_rbkw", (DL_FUNC) &_gkwdist_rbkw, 5},
    {"_gkwdist_llbkw", (DL_FUNC) &_gkwdist_llbkw, 2},
    {"_gkwdist_grbkw", (DL_FUNC) &_gkwdist_grbkw, 2},
    {"_gkwdist_hsbkw", (DL_FUNC) &_gkwdist_hsbkw, 2},
    {"_gkwdist_dmc", (DL_FUNC) &_gkwdist_dmc, 5},
    {"_gkwdist_pmc", (DL_FUNC) &_gkwdist_pmc, 6},
    {"_gkwdist_qmc", (DL_FUNC) &_gkwdist_qmc, 6},
    {"_gkwdist_rmc", (DL_FUNC) &_gkwdist_rmc, 4},
    {"_gkwdist_llmc", (DL_FUNC) &_gkwdist_llmc, 2},
    {"_gkwdist_grmc", (DL_FUNC) &_gkwdist_grmc, 2},
    {"_gkwdist_hsmc", (DL_FUNC) &_gkwdist_hsmc, 2},
    {"_gkwdist_dekw", (DL_FUNC) &_gkwdist_dekw, 5},
    {"_gkwdist_pekw", (DL_FUNC) &_gkwdist_pekw, 6},
    {"_gkwdist_qekw", (DL_FUNC) &_gkwdist_qekw, 6},
    {"_gkwdist_rekw", (DL_FUNC) &_gkwdist_rekw, 4},
    {"_gkwdist_llekw", (DL_FUNC) &_gkwdist_llekw, 2},
    {"_gkwdist_grekw", (DL_FUNC) &_gkwdist_grekw, 2},
    {"_gkwdist_hsekw", (DL_FUNC) &_gkwdist_hsekw, 2},
    {"_gkwdist_dgkw", (DL_FUNC) &_gkwdist_dgkw, 7},
    {"_gkwdist_pgkw", (DL_FUNC) &_gkwdist_pgkw, 8},
    {"_gkwdist_qgkw", (DL_FUNC) &_gkwdist_qgkw, 8},
    {"_gkwdist_rgkw", (DL_FUNC) &_gkwdist_rgkw, 6},
    {"_gkwdist_llgkw", (DL_FUNC) &_gkwdist_llgkw, 2},
    {"_gkwdist_grgkw", (DL_FUNC) &_gkwdist_grgkw, 2},
    {"_gkwdist_hsgkw", (DL_FUNC) &_gkwdist_hsgkw, 2},
    {"_gkwdist_gkwgetstartvalues", (DL_FUNC) &_gkwdist_gkwgetstartvalues, 3},
    {"_gkwdist_dkkw", (DL_FUNC) &_gkwdist_dkkw, 6},
    {"_gkwdist_pkkw", (DL_FUNC) &_gkwdist_pkkw, 7},
    {"_gkwdist_qkkw", (DL_FUNC) &_gkwdist_qkkw, 7},
    {"_gkwdist_rkkw", (DL_FUNC) &_gkwdist_rkkw, 5},
    {"_gkwdist_llkkw", (DL_FUNC) &_gkwdist_llkkw, 2},
    {"_gkwdist_grkkw", (DL_FUNC) &_gkwdist_grkkw, 2},
    {"_gkwdist_hskkw", (DL_FUNC) &_gkwdist_hskkw, 2},
    {"_gkwdist_dkw", (DL_FUNC) &_gkwdist_dkw, 4},
    {"_gkwdist_pkw", (DL_FUNC) &_gkwdist_pkw, 5},
    {"_gkwdist_qkw", (DL_FUNC) &_gkwdist_qkw, 5},
    {"_gkwdist_rkw", (DL_FUNC) &_gkwdist_rkw, 3},
    {"_gkwdist_llkw", (DL_FUNC) &_gkwdist_llkw, 2},
    {"_gkwdist_grkw", (DL_FUNC) &_gkwdist_grkw, 2},
    {"_gkwdist_hskw", (DL_FUNC) &_gkwdist_hskw, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_gkwdist(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
